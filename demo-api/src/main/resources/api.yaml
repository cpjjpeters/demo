openapi: 3.0.0
info:
  description: DEMO Backend API
  version: 1.0.0
  title: DEMO Backend API

tags:
  - name: Name
    description: Demo application

paths:
  /demo/api/v1/cities:
    get:
      tags:
        - City
      operationId: findAllCityResources
      summary: show a list of all cities
      description: returns all the cities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
        '204':
          description: No content
  /demo/api/v1/steden:
    get:
      tags:
        - Steden
      operationId: findAllSteden
      summary: show a list of all steden
      description: returns all the steden
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stad'
        '204':
          description: No content

  /demo/api/v1/employees:
    get:
      tags:
        - Employee
      operationId: findAllEmployees
      summary: show a list of all employees
      description: returns all the employees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '204':
          description: No content
  /demo/api/v1/cities/:
    get:
      tags:
        - Cities
      operationId: findAllCities
      summary: show a list of all cities
      description: returns all the cities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
        '204':
          description: No content

  /demo/api/v1/instruments/:
    get:
      tags:
        - Instruments
      operationId: findAllInstruments
      summary: show a list of all instruments
      description: returns all the instruments, ordered
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instrument'
        '204':
          description: No content

    post:
      tags:
        - Instruments
      summary: Add a new instrument
      description: Add a new instrument
      operationId: addInstrument
      requestBody:
        description: Create a new instrument
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Instrument"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instrument"
        '405':
          description: Invalid input

  /demo/api/v1/instruments/{id}:
    get:
      tags:
        - Instruments
      summary: Find Instrument by ID
      description: Returns a single Instrument
      operationId: getInstrumentById
      parameters:
        - name: id
          in: path
          description: id of Instrument to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instrument'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - Instruments
      operationId: updateInstrument
      summary: update
      description: Update
      parameters:
        - name: id
          in: path
          description:  The id of the instrument you want to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: the necessary fields.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Instrument"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instrument"
        '400':
          description: Invalid ID supplied
        '404':
          description: Instrument not found
        '405':
          description: Validation exception

    delete:
      tags:
        - Instruments
      summary: Deletes an instrument
      description: delete an instrument
      operationId: deleteInstrument
      parameters:
        - name: id
          in: path
          description: instrument id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid instrument value

components:
  schemas:
    Instrument:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The id of the Instrument
        name:
          type: string
          description: The name of the Instrument
        isinCode:
          type: string
          description: The isin of the Instrument
        initialMarket:
          type: string
          description: The stockMarket of the Instrument
        currency:
          type: string
          description: The currency of the Instrument

    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The id of the Employee
        firstName:
          type: string
          description: first name of the Employee
        lastName:
          type: string
          description: last name of the Employee
        emailId:
          type: string
          description: email address
    City:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The id of the City
        name:
          type: string
          description: name of the City
        population:
          type: integer
          format: int64
          description: number of inhabitants of the City
    Stad:
      type: object
      properties:
        #        id:
        #          type: integer
        #          format: int64
        #          description: The id of the     Stad
        name:
          type: string
          description: name of the   Stad

        population:
          type: integer
          format: int64
          description: number of inhabtants of the Stad